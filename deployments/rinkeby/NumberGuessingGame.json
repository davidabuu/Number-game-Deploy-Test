{
  "address": "0x161c012cA94333c7d6E86E49507ad0021aB59B9d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subcriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NumberGuessingGame__NotEngoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NumberGuessingGame__YOUFAILED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestId",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "Winner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "enterGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "guessTheNumber",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x78f804646fc0ed29d99fb4b51c1492570e6c60d886851a2ed6ead3e3ccc378ae",
  "receipt": {
    "to": null,
    "from": "0xfC467bECB229Dd35ce59AB6B0a321e803D5A00B4",
    "contractAddress": "0x161c012cA94333c7d6E86E49507ad0021aB59B9d",
    "transactionIndex": 4,
    "gasUsed": "869488",
    "logsBloom": "0x
    "blockHash": "0x69cadeaaceb478ae59d8ee265bf48342c73d49a0f9c3c8ac5b7896c4601b39e9",
    "transactionHash": "0x78f804646fc0ed29d99fb4b51c1492570e6c60d886851a2ed6ead3e3ccc378ae",
    "logs": [],
    "blockNumber": 11180144,
    "cumulativeGasUsed": "1509669",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "10327"
  ],
  "numDeployments": 1,
  "solcInputHash": "349072d566870b3f0de73b84f497b77e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subcriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NumberGuessingGame__NotEngoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberGuessingGame__YOUFAILED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"guessTheNumber\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NumberGuessingGame.sol\":\"NumberGuessingGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/NumberGuessingGame.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n//Pending Tasks\\r\\n//Step1: Let Mangager Set the number the chainlink randomess //DONE\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nerror NumberGuessingGame__NotEngoughEthEntered();\\r\\nerror NumberGuessingGame__NotAllowedToCallThisFunction();\\r\\nerror NumberGuessingGame__YOUFAILED();\\r\\ncontract NumberGuessingGame is VRFConsumerBaseV2 {\\r\\n    //State Variables\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address private s_manager;\\r\\n    address payable []  private s_players;\\r\\n     mapping(address => bool) paid;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subcriptionId;\\r\\n    uint16 private constant REQUEST_CONFRIMATIONS = 3; \\r\\n    uint32 private constant CALLBACK_LIMIT = 100000;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    uint256 private s_correctNumber;\\r\\n    address private s_winner;\\r\\n      VRFCoordinatorV2Interface private immutable i_vrfCoordinator; \\r\\n    //Events\\r\\n    event RequestId(uint256 indexed requestId);\\r\\n    event Winner(address indexed winner);\\r\\n    constructor(address vrfCoordinatorV2, uint256 entranceFee, bytes32 gasLane, uint64 subcriptionId) VRFConsumerBaseV2(vrfCoordinatorV2){\\r\\n        i_entranceFee = entranceFee;\\r\\n        s_manager = msg.sender;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subcriptionId = subcriptionId;\\r\\n    }\\r\\n    modifier onlyOwner{\\r\\n        require(msg.sender == s_manager, \\\"You are not allowed to call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n    function enterGame() public payable{\\r\\n        if(msg.value < i_entranceFee){\\r\\n            revert NumberGuessingGame__NotEngoughEthEntered();\\r\\n        }\\r\\n        paid[msg.sender] = true;\\r\\n        s_players.push(payable(msg.sender));\\r\\n    }\\r\\n    //VRF Function to request The Random Number\\r\\n    function requestRandomNumber()external onlyOwner{\\r\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n      i_gasLane,\\r\\n      i_subcriptionId,\\r\\n      REQUEST_CONFRIMATIONS,\\r\\n      CALLBACK_LIMIT,\\r\\n      NUM_WORDS\\r\\n    );\\r\\n     emit RequestId(requestId);\\r\\n    }\\r\\n     function fulfillRandomWords(\\r\\n    uint256, /* requestId */\\r\\n    uint256[] memory randomWords\\r\\n  ) internal override onlyOwner {\\r\\n    uint256 randomNum = randomWords[0] % 5;\\r\\n    s_correctNumber = randomNum;\\r\\n  }\\r\\nfunction guessTheNumber(uint256 num) public payable {\\r\\n     require(paid[msg.sender]);\\r\\n    if(s_correctNumber == num){\\r\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\r\\n        s_winner = msg.sender;\\r\\n        if(!success){\\r\\n            revert NumberGuessingGame__YOUFAILED();\\r\\n        }\\r\\n    }\\r\\n    emit Winner(msg.sender);\\r\\n      s_players = new address payable[](0);\\r\\n}\\r\\n    /*View /Pure Functions */ \\r\\n    function getEntranceFee() public view returns (uint256){\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n    //Get Players Length\\r\\n    function totalNumberOfPlayers() public view returns (uint256){\\r\\n        return s_players.length;\\r\\n    }\\r\\n    //Get Recent Winner\\r\\n    function getRecentWinner() public view returns (address){\\r\\n        return s_winner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3b8ec2e8f332c1350cbc47eed0492f41392ce14712ee408add722b3541c60d4e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200113e3803806200113e83398181016040528101906200003891906200023e565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508260a08181525050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508160c081815250508067ffffffffffffffff1660e08167ffffffffffffffff168152505050505050620002b0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014b826200011e565b9050919050565b6200015d816200013e565b81146200016957600080fd5b50565b6000815190506200017d8162000152565b92915050565b6000819050919050565b620001988162000183565b8114620001a457600080fd5b50565b600081519050620001b8816200018d565b92915050565b6000819050919050565b620001d381620001be565b8114620001df57600080fd5b50565b600081519050620001f381620001c8565b92915050565b600067ffffffffffffffff82169050919050565b6200021881620001f9565b81146200022457600080fd5b50565b60008151905062000238816200020d565b92915050565b600080600080608085870312156200025b576200025a62000119565b5b60006200026b878288016200016c565b94505060206200027e87828801620001a7565b93505060406200029187828801620001e2565b9250506060620002a48782880162000227565b91505092959194509250565b60805160a05160c05160e05161010051610e3b6200030360003960006104240152600061048101526000610460015260008181610160015261024601526000818161018601526101da0152610e3b6000f3fe6080604052600436106100705760003560e01c806339db03731161004e57806339db0373146100d3578063473f1ddc146100fe5780638678a7b214610129578063d4f639d71461014057610070565b806309bc33a7146100755780631fe543e3146100a0578063218bd577146100c9575b600080fd5b34801561008157600080fd5b5061008a61015c565b60405161009791906108be565b60405180910390f35b3480156100ac57600080fd5b506100c760048036038101906100c29190610a72565b610184565b005b6100d1610244565b005b3480156100df57600080fd5b506100e861035b565b6040516100f591906108be565b60405180910390f35b34801561010a57600080fd5b50610113610368565b6040516101209190610b0f565b60405180910390f35b34801561013557600080fd5b5061013e610392565b005b61015a60048036038101906101559190610b2a565b61054c565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161022d929190610b57565b60405180910390fd5b6102408282610738565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561029e576040517f165c44e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600180549050905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041790610c03565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060016040518663ffffffff1660e01b81526004016104c8959493929190610c9b565b602060405180830381600087803b1580156104e257600080fd5b505af11580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610d03565b9050807f3554fe1ee254b86916f1f06dddd374934dd5c2bfe18b0150f0f124268baaf27560405160405180910390a250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105a257600080fd5b8060035414156106925760003373ffffffffffffffffffffffffffffffffffffffff16476040516105d290610d61565b60006040518083038185875af1925050503d806000811461060f576040519150601f19603f3d011682016040523d82523d6000602084013e610614565b606091505b5050905033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610690576040517fa6b0206400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b3373ffffffffffffffffffffffffffffffffffffffff167f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c060405160405180910390a2600067ffffffffffffffff8111156106f0576106ef61092f565b5b60405190808252806020026020018201604052801561071e5781602001602082028036833780820191505090505b50600190805190602001906107349291906107fe565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd90610c03565b60405180910390fd5b60006005826000815181106107de576107dd610d76565b5b60200260200101516107f09190610dd4565b905080600381905550505050565b828054828255906000526020600020908101928215610877579160200282015b828111156108765782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061081e565b5b5090506108849190610888565b5090565b5b808211156108a1576000816000905550600101610889565b5090565b6000819050919050565b6108b8816108a5565b82525050565b60006020820190506108d360008301846108af565b92915050565b6000604051905090565b600080fd5b600080fd5b6108f6816108a5565b811461090157600080fd5b50565b600081359050610913816108ed565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109678261091e565b810181811067ffffffffffffffff821117156109865761098561092f565b5b80604052505050565b60006109996108d9565b90506109a5828261095e565b919050565b600067ffffffffffffffff8211156109c5576109c461092f565b5b602082029050602081019050919050565b600080fd5b60006109ee6109e9846109aa565b61098f565b90508083825260208201905060208402830185811115610a1157610a106109d6565b5b835b81811015610a3a5780610a268882610904565b845260208401935050602081019050610a13565b5050509392505050565b600082601f830112610a5957610a58610919565b5b8135610a698482602086016109db565b91505092915050565b60008060408385031215610a8957610a886108e3565b5b6000610a9785828601610904565b925050602083013567ffffffffffffffff811115610ab857610ab76108e8565b5b610ac485828601610a44565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af982610ace565b9050919050565b610b0981610aee565b82525050565b6000602082019050610b246000830184610b00565b92915050565b600060208284031215610b4057610b3f6108e3565b5b6000610b4e84828501610904565b91505092915050565b6000604082019050610b6c6000830185610b00565b610b796020830184610b00565b9392505050565b600082825260208201905092915050565b7f596f7520617265206e6f7420616c6c6f77656420746f2063616c6c207468697360008201527f2066756e6374696f6e0000000000000000000000000000000000000000000000602082015250565b6000610bed602983610b80565b9150610bf882610b91565b604082019050919050565b60006020820190508181036000830152610c1c81610be0565b9050919050565b6000819050919050565b610c3681610c23565b82525050565b600067ffffffffffffffff82169050919050565b610c5981610c3c565b82525050565b600061ffff82169050919050565b610c7681610c5f565b82525050565b600063ffffffff82169050919050565b610c9581610c7c565b82525050565b600060a082019050610cb06000830188610c2d565b610cbd6020830187610c50565b610cca6040830186610c6d565b610cd76060830185610c8c565b610ce46080830184610c8c565b9695505050505050565b600081519050610cfd816108ed565b92915050565b600060208284031215610d1957610d186108e3565b5b6000610d2784828501610cee565b91505092915050565b600081905092915050565b50565b6000610d4b600083610d30565b9150610d5682610d3b565b600082019050919050565b6000610d6c82610d3e565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ddf826108a5565b9150610dea836108a5565b925082610dfa57610df9610da5565b5b82820690509291505056fea264697066735822122097305d0d6f2d56e21fd307da50bda587364bb81e0faf026904100268fe6c0e0364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c806339db03731161004e57806339db0373146100d3578063473f1ddc146100fe5780638678a7b214610129578063d4f639d71461014057610070565b806309bc33a7146100755780631fe543e3146100a0578063218bd577146100c9575b600080fd5b34801561008157600080fd5b5061008a61015c565b60405161009791906108be565b60405180910390f35b3480156100ac57600080fd5b506100c760048036038101906100c29190610a72565b610184565b005b6100d1610244565b005b3480156100df57600080fd5b506100e861035b565b6040516100f591906108be565b60405180910390f35b34801561010a57600080fd5b50610113610368565b6040516101209190610b0f565b60405180910390f35b34801561013557600080fd5b5061013e610392565b005b61015a60048036038101906101559190610b2a565b61054c565b005b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161022d929190610b57565b60405180910390fd5b6102408282610738565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561029e576040517f165c44e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600180549050905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610420576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041790610c03565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060016040518663ffffffff1660e01b81526004016104c8959493929190610c9b565b602060405180830381600087803b1580156104e257600080fd5b505af11580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610d03565b9050807f3554fe1ee254b86916f1f06dddd374934dd5c2bfe18b0150f0f124268baaf27560405160405180910390a250565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105a257600080fd5b8060035414156106925760003373ffffffffffffffffffffffffffffffffffffffff16476040516105d290610d61565b60006040518083038185875af1925050503d806000811461060f576040519150601f19603f3d011682016040523d82523d6000602084013e610614565b606091505b5050905033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610690576040517fa6b0206400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b3373ffffffffffffffffffffffffffffffffffffffff167f745c90b656b4aafe296c8ca35aeacfe56cb96c90e1d320e5da643fff1051b6c060405160405180910390a2600067ffffffffffffffff8111156106f0576106ef61092f565b5b60405190808252806020026020018201604052801561071e5781602001602082028036833780820191505090505b50600190805190602001906107349291906107fe565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd90610c03565b60405180910390fd5b60006005826000815181106107de576107dd610d76565b5b60200260200101516107f09190610dd4565b905080600381905550505050565b828054828255906000526020600020908101928215610877579160200282015b828111156108765782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061081e565b5b5090506108849190610888565b5090565b5b808211156108a1576000816000905550600101610889565b5090565b6000819050919050565b6108b8816108a5565b82525050565b60006020820190506108d360008301846108af565b92915050565b6000604051905090565b600080fd5b600080fd5b6108f6816108a5565b811461090157600080fd5b50565b600081359050610913816108ed565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109678261091e565b810181811067ffffffffffffffff821117156109865761098561092f565b5b80604052505050565b60006109996108d9565b90506109a5828261095e565b919050565b600067ffffffffffffffff8211156109c5576109c461092f565b5b602082029050602081019050919050565b600080fd5b60006109ee6109e9846109aa565b61098f565b90508083825260208201905060208402830185811115610a1157610a106109d6565b5b835b81811015610a3a5780610a268882610904565b845260208401935050602081019050610a13565b5050509392505050565b600082601f830112610a5957610a58610919565b5b8135610a698482602086016109db565b91505092915050565b60008060408385031215610a8957610a886108e3565b5b6000610a9785828601610904565b925050602083013567ffffffffffffffff811115610ab857610ab76108e8565b5b610ac485828601610a44565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af982610ace565b9050919050565b610b0981610aee565b82525050565b6000602082019050610b246000830184610b00565b92915050565b600060208284031215610b4057610b3f6108e3565b5b6000610b4e84828501610904565b91505092915050565b6000604082019050610b6c6000830185610b00565b610b796020830184610b00565b9392505050565b600082825260208201905092915050565b7f596f7520617265206e6f7420616c6c6f77656420746f2063616c6c207468697360008201527f2066756e6374696f6e0000000000000000000000000000000000000000000000602082015250565b6000610bed602983610b80565b9150610bf882610b91565b604082019050919050565b60006020820190508181036000830152610c1c81610be0565b9050919050565b6000819050919050565b610c3681610c23565b82525050565b600067ffffffffffffffff82169050919050565b610c5981610c3c565b82525050565b600061ffff82169050919050565b610c7681610c5f565b82525050565b600063ffffffff82169050919050565b610c9581610c7c565b82525050565b600060a082019050610cb06000830188610c2d565b610cbd6020830187610c50565b610cca6040830186610c6d565b610cd76060830185610c8c565b610ce46080830184610c8c565b9695505050505050565b600081519050610cfd816108ed565b92915050565b600060208284031215610d1957610d186108e3565b5b6000610d2784828501610cee565b91505092915050565b600081905092915050565b50565b6000610d4b600083610d30565b9150610d5682610d3b565b600082019050919050565b6000610d6c82610d3e565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ddf826108a5565b9150610dea836108a5565b925082610dfa57610df9610da5565b5b82820690509291505056fea264697066735822122097305d0d6f2d56e21fd307da50bda587364bb81e0faf026904100268fe6c0e0364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1147,
        "contract": "contracts/NumberGuessingGame.sol:NumberGuessingGame",
        "label": "s_manager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1150,
        "contract": "contracts/NumberGuessingGame.sol:NumberGuessingGame",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1154,
        "contract": "contracts/NumberGuessingGame.sol:NumberGuessingGame",
        "label": "paid",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1169,
        "contract": "contracts/NumberGuessingGame.sol:NumberGuessingGame",
        "label": "s_correctNumber",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1171,
        "contract": "contracts/NumberGuessingGame.sol:NumberGuessingGame",
        "label": "s_winner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}